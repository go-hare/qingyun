// Code generated by protoc-gen-realmicro. DO NOT EDIT.
// source: proto/mobile/mobile-fishing.proto

package mobile_fishing

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/realmicro/realmicro/client"
	server "github.com/realmicro/realmicro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MobileFishingService service

// Client API for MobileFishingService service

type MobileFishingService interface {
	// Sends a greeting
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*RefreshTokenResponse, error)
	WechatLogin(ctx context.Context, in *WechatLoginRequest, opts ...client.CallOption) (*WechatLoginResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error)
	GetUserExtend(ctx context.Context, in *GetUserExtendRequest, opts ...client.CallOption) (*GetUserExtendResponse, error)
	//banner图
	ListBanners(ctx context.Context, in *ListBannersRequest, opts ...client.CallOption) (*ListBannersResponse, error)
	GetInfomationConfig(ctx context.Context, in *GetInfomationConfigRequest, opts ...client.CallOption) (*GetInfomationConfigResponse, error)
	//关注
	UserFollow(ctx context.Context, in *UserFollowRequest, opts ...client.CallOption) (*UserFollowResponse, error)
	//取消关注
	CancelUserFollow(ctx context.Context, in *CancelUserFollowRequest, opts ...client.CallOption) (*CancelUserFollowResponse, error)
	//关注列表
	ListUserFollows(ctx context.Context, in *ListUserFollowsRequest, opts ...client.CallOption) (*ListUserFollowsResponse, error)
	UserCollection(ctx context.Context, in *UserCollectionRequest, opts ...client.CallOption) (*UserCollectionResponse, error)
	ListInfomations(ctx context.Context, in *ListInfomationsRequest, opts ...client.CallOption) (*ListInfomationsResponse, error)
	DeleteInfomation(ctx context.Context, in *DeleteInfomationRequest, opts ...client.CallOption) (*DeleteInfomationResponse, error)
	GetInfomation(ctx context.Context, in *GetInfomationRequest, opts ...client.CallOption) (*GetInfomationResponse, error)
	UserInfomationLike(ctx context.Context, in *UserInfomationLikeRequest, opts ...client.CallOption) (*UserInfomationLikeResponse, error)
	UserInfomationCollection(ctx context.Context, in *UserInfomationCollectionRequest, opts ...client.CallOption) (*UserInfomationCollectionResponse, error)
	ListActicleCategorys(ctx context.Context, in *ListActicleCategorysRequest, opts ...client.CallOption) (*ListActicleCategorysResponse, error)
	GetActicleConfig(ctx context.Context, in *GetActicleConfigRequest, opts ...client.CallOption) (*GetActicleConfigResponse, error)
	DeleteActicle(ctx context.Context, in *DeleteArticleRequest, opts ...client.CallOption) (*DeleteArticleResponse, error)
	ListActiclesByCategory(ctx context.Context, in *ListActiclesByCategoryRequest, opts ...client.CallOption) (*ListActiclesByCategoryResponse, error)
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...client.CallOption) (*GetArticleResponse, error)
	UserArticleLike(ctx context.Context, in *UserArticleLikeRequest, opts ...client.CallOption) (*UserArticleLikeResponse, error)
	UserArticleCollection(ctx context.Context, in *UserArticleCollectionRequest, opts ...client.CallOption) (*UserArticleCollectionResponse, error)
	GetArticleTheme(ctx context.Context, in *GetArticleThemeRequest, opts ...client.CallOption) (*GetArticleThemeResponse, error)
	GetArticleTag(ctx context.Context, in *GetArticleTagRequest, opts ...client.CallOption) (*GetArticleTagResponse, error)
	ListActiclesByTag(ctx context.Context, in *ListActiclesByTagRequest, opts ...client.CallOption) (*ListActiclesByTagResponse, error)
	ListUserArticles(ctx context.Context, in *ListUserArticlesRequest, opts ...client.CallOption) (*ListUserArticlesResponse, error)
	ListUserInfomations(ctx context.Context, in *ListUserInfomationsRequest, opts ...client.CallOption) (*ListUserInfomationsResponse, error)
	SendComment(ctx context.Context, in *SendCommentRequest, opts ...client.CallOption) (*SendCommentResponse, error)
	UserCommentLike(ctx context.Context, in *UserCommentLikeRequest, opts ...client.CallOption) (*UserCommentLikeResponse, error)
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...client.CallOption) (*ListCommentsResponse, error)
	CheckUserFollw(ctx context.Context, in *CheckUserFollwRequest, opts ...client.CallOption) (*CheckUserFollwResponse, error)
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...client.CallOption) (*ListMessagesResponse, error)
	UserMessageRead(ctx context.Context, in *UserMessageReadRequest, opts ...client.CallOption) (*UserMessageReadResponse, error)
	UserMessageReadAll(ctx context.Context, in *UserMessageReadAllRequest, opts ...client.CallOption) (*UserMessageReadAllResponse, error)
	GetUserMessageUnCount(ctx context.Context, in *GetUserMessageUnCountRequest, opts ...client.CallOption) (*GetUserMessageUnCountResponse, error)
	CreateInfomationOrder(ctx context.Context, in *CreateInfomationOrderRequest, opts ...client.CallOption) (*CreateInfomationOrderResponse, error)
	GetInfomationOrder(ctx context.Context, in *GetInfomationOrderRequest, opts ...client.CallOption) (*GetInfomationOrderResponse, error)
	CheckInfomationOrderBuy(ctx context.Context, in *CheckInfomationOrderBuyRequest, opts ...client.CallOption) (*CheckInfomationOrderBuyResponse, error)
	ListUserInfomationOrders(ctx context.Context, in *ListUserInfomationOrdersRequest, opts ...client.CallOption) (*ListUserInfomationOrdersResponse, error)
	ListFans(ctx context.Context, in *ListFansRequest, opts ...client.CallOption) (*ListFansResponse, error)
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...client.CallOption) (*CreateArticleResponse, error)
}

type mobileFishingService struct {
	c    client.Client
	name string
}

func NewMobileFishingService(name string, c client.Client) MobileFishingService {
	return &mobileFishingService{
		c:    c,
		name: name,
	}
}

func (c *mobileFishingService) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*RefreshTokenResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.RefreshToken", in)
	out := new(RefreshTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) WechatLogin(ctx context.Context, in *WechatLoginRequest, opts ...client.CallOption) (*WechatLoginResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.WechatLogin", in)
	out := new(WechatLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.GetUser", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) GetUserExtend(ctx context.Context, in *GetUserExtendRequest, opts ...client.CallOption) (*GetUserExtendResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.GetUserExtend", in)
	out := new(GetUserExtendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListBanners(ctx context.Context, in *ListBannersRequest, opts ...client.CallOption) (*ListBannersResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListBanners", in)
	out := new(ListBannersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) GetInfomationConfig(ctx context.Context, in *GetInfomationConfigRequest, opts ...client.CallOption) (*GetInfomationConfigResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.GetInfomationConfig", in)
	out := new(GetInfomationConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) UserFollow(ctx context.Context, in *UserFollowRequest, opts ...client.CallOption) (*UserFollowResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.UserFollow", in)
	out := new(UserFollowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) CancelUserFollow(ctx context.Context, in *CancelUserFollowRequest, opts ...client.CallOption) (*CancelUserFollowResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.CancelUserFollow", in)
	out := new(CancelUserFollowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListUserFollows(ctx context.Context, in *ListUserFollowsRequest, opts ...client.CallOption) (*ListUserFollowsResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListUserFollows", in)
	out := new(ListUserFollowsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) UserCollection(ctx context.Context, in *UserCollectionRequest, opts ...client.CallOption) (*UserCollectionResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.UserCollection", in)
	out := new(UserCollectionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListInfomations(ctx context.Context, in *ListInfomationsRequest, opts ...client.CallOption) (*ListInfomationsResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListInfomations", in)
	out := new(ListInfomationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) DeleteInfomation(ctx context.Context, in *DeleteInfomationRequest, opts ...client.CallOption) (*DeleteInfomationResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.DeleteInfomation", in)
	out := new(DeleteInfomationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) GetInfomation(ctx context.Context, in *GetInfomationRequest, opts ...client.CallOption) (*GetInfomationResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.GetInfomation", in)
	out := new(GetInfomationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) UserInfomationLike(ctx context.Context, in *UserInfomationLikeRequest, opts ...client.CallOption) (*UserInfomationLikeResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.UserInfomationLike", in)
	out := new(UserInfomationLikeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) UserInfomationCollection(ctx context.Context, in *UserInfomationCollectionRequest, opts ...client.CallOption) (*UserInfomationCollectionResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.UserInfomationCollection", in)
	out := new(UserInfomationCollectionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListActicleCategorys(ctx context.Context, in *ListActicleCategorysRequest, opts ...client.CallOption) (*ListActicleCategorysResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListActicleCategorys", in)
	out := new(ListActicleCategorysResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) GetActicleConfig(ctx context.Context, in *GetActicleConfigRequest, opts ...client.CallOption) (*GetActicleConfigResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.GetActicleConfig", in)
	out := new(GetActicleConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) DeleteActicle(ctx context.Context, in *DeleteArticleRequest, opts ...client.CallOption) (*DeleteArticleResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.DeleteActicle", in)
	out := new(DeleteArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListActiclesByCategory(ctx context.Context, in *ListActiclesByCategoryRequest, opts ...client.CallOption) (*ListActiclesByCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListActiclesByCategory", in)
	out := new(ListActiclesByCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...client.CallOption) (*GetArticleResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.GetArticle", in)
	out := new(GetArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) UserArticleLike(ctx context.Context, in *UserArticleLikeRequest, opts ...client.CallOption) (*UserArticleLikeResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.UserArticleLike", in)
	out := new(UserArticleLikeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) UserArticleCollection(ctx context.Context, in *UserArticleCollectionRequest, opts ...client.CallOption) (*UserArticleCollectionResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.UserArticleCollection", in)
	out := new(UserArticleCollectionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) GetArticleTheme(ctx context.Context, in *GetArticleThemeRequest, opts ...client.CallOption) (*GetArticleThemeResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.GetArticleTheme", in)
	out := new(GetArticleThemeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) GetArticleTag(ctx context.Context, in *GetArticleTagRequest, opts ...client.CallOption) (*GetArticleTagResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.GetArticleTag", in)
	out := new(GetArticleTagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListActiclesByTag(ctx context.Context, in *ListActiclesByTagRequest, opts ...client.CallOption) (*ListActiclesByTagResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListActiclesByTag", in)
	out := new(ListActiclesByTagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListUserArticles(ctx context.Context, in *ListUserArticlesRequest, opts ...client.CallOption) (*ListUserArticlesResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListUserArticles", in)
	out := new(ListUserArticlesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListUserInfomations(ctx context.Context, in *ListUserInfomationsRequest, opts ...client.CallOption) (*ListUserInfomationsResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListUserInfomations", in)
	out := new(ListUserInfomationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) SendComment(ctx context.Context, in *SendCommentRequest, opts ...client.CallOption) (*SendCommentResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.SendComment", in)
	out := new(SendCommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) UserCommentLike(ctx context.Context, in *UserCommentLikeRequest, opts ...client.CallOption) (*UserCommentLikeResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.UserCommentLike", in)
	out := new(UserCommentLikeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...client.CallOption) (*ListCommentsResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListComments", in)
	out := new(ListCommentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) CheckUserFollw(ctx context.Context, in *CheckUserFollwRequest, opts ...client.CallOption) (*CheckUserFollwResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.CheckUserFollw", in)
	out := new(CheckUserFollwResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...client.CallOption) (*ListMessagesResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListMessages", in)
	out := new(ListMessagesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) UserMessageRead(ctx context.Context, in *UserMessageReadRequest, opts ...client.CallOption) (*UserMessageReadResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.UserMessageRead", in)
	out := new(UserMessageReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) UserMessageReadAll(ctx context.Context, in *UserMessageReadAllRequest, opts ...client.CallOption) (*UserMessageReadAllResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.UserMessageReadAll", in)
	out := new(UserMessageReadAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) GetUserMessageUnCount(ctx context.Context, in *GetUserMessageUnCountRequest, opts ...client.CallOption) (*GetUserMessageUnCountResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.GetUserMessageUnCount", in)
	out := new(GetUserMessageUnCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) CreateInfomationOrder(ctx context.Context, in *CreateInfomationOrderRequest, opts ...client.CallOption) (*CreateInfomationOrderResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.CreateInfomationOrder", in)
	out := new(CreateInfomationOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) GetInfomationOrder(ctx context.Context, in *GetInfomationOrderRequest, opts ...client.CallOption) (*GetInfomationOrderResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.GetInfomationOrder", in)
	out := new(GetInfomationOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) CheckInfomationOrderBuy(ctx context.Context, in *CheckInfomationOrderBuyRequest, opts ...client.CallOption) (*CheckInfomationOrderBuyResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.CheckInfomationOrderBuy", in)
	out := new(CheckInfomationOrderBuyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListUserInfomationOrders(ctx context.Context, in *ListUserInfomationOrdersRequest, opts ...client.CallOption) (*ListUserInfomationOrdersResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListUserInfomationOrders", in)
	out := new(ListUserInfomationOrdersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) ListFans(ctx context.Context, in *ListFansRequest, opts ...client.CallOption) (*ListFansResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.ListFans", in)
	out := new(ListFansResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingService) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...client.CallOption) (*CreateArticleResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingService.CreateArticle", in)
	out := new(CreateArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MobileFishingService service

type MobileFishingServiceHandler interface {
	// Sends a greeting
	RefreshToken(context.Context, *RefreshTokenRequest, *RefreshTokenResponse) error
	WechatLogin(context.Context, *WechatLoginRequest, *WechatLoginResponse) error
	GetUser(context.Context, *GetUserRequest, *GetUserResponse) error
	GetUserExtend(context.Context, *GetUserExtendRequest, *GetUserExtendResponse) error
	//banner图
	ListBanners(context.Context, *ListBannersRequest, *ListBannersResponse) error
	GetInfomationConfig(context.Context, *GetInfomationConfigRequest, *GetInfomationConfigResponse) error
	//关注
	UserFollow(context.Context, *UserFollowRequest, *UserFollowResponse) error
	//取消关注
	CancelUserFollow(context.Context, *CancelUserFollowRequest, *CancelUserFollowResponse) error
	//关注列表
	ListUserFollows(context.Context, *ListUserFollowsRequest, *ListUserFollowsResponse) error
	UserCollection(context.Context, *UserCollectionRequest, *UserCollectionResponse) error
	ListInfomations(context.Context, *ListInfomationsRequest, *ListInfomationsResponse) error
	DeleteInfomation(context.Context, *DeleteInfomationRequest, *DeleteInfomationResponse) error
	GetInfomation(context.Context, *GetInfomationRequest, *GetInfomationResponse) error
	UserInfomationLike(context.Context, *UserInfomationLikeRequest, *UserInfomationLikeResponse) error
	UserInfomationCollection(context.Context, *UserInfomationCollectionRequest, *UserInfomationCollectionResponse) error
	ListActicleCategorys(context.Context, *ListActicleCategorysRequest, *ListActicleCategorysResponse) error
	GetActicleConfig(context.Context, *GetActicleConfigRequest, *GetActicleConfigResponse) error
	DeleteActicle(context.Context, *DeleteArticleRequest, *DeleteArticleResponse) error
	ListActiclesByCategory(context.Context, *ListActiclesByCategoryRequest, *ListActiclesByCategoryResponse) error
	GetArticle(context.Context, *GetArticleRequest, *GetArticleResponse) error
	UserArticleLike(context.Context, *UserArticleLikeRequest, *UserArticleLikeResponse) error
	UserArticleCollection(context.Context, *UserArticleCollectionRequest, *UserArticleCollectionResponse) error
	GetArticleTheme(context.Context, *GetArticleThemeRequest, *GetArticleThemeResponse) error
	GetArticleTag(context.Context, *GetArticleTagRequest, *GetArticleTagResponse) error
	ListActiclesByTag(context.Context, *ListActiclesByTagRequest, *ListActiclesByTagResponse) error
	ListUserArticles(context.Context, *ListUserArticlesRequest, *ListUserArticlesResponse) error
	ListUserInfomations(context.Context, *ListUserInfomationsRequest, *ListUserInfomationsResponse) error
	SendComment(context.Context, *SendCommentRequest, *SendCommentResponse) error
	UserCommentLike(context.Context, *UserCommentLikeRequest, *UserCommentLikeResponse) error
	ListComments(context.Context, *ListCommentsRequest, *ListCommentsResponse) error
	CheckUserFollw(context.Context, *CheckUserFollwRequest, *CheckUserFollwResponse) error
	ListMessages(context.Context, *ListMessagesRequest, *ListMessagesResponse) error
	UserMessageRead(context.Context, *UserMessageReadRequest, *UserMessageReadResponse) error
	UserMessageReadAll(context.Context, *UserMessageReadAllRequest, *UserMessageReadAllResponse) error
	GetUserMessageUnCount(context.Context, *GetUserMessageUnCountRequest, *GetUserMessageUnCountResponse) error
	CreateInfomationOrder(context.Context, *CreateInfomationOrderRequest, *CreateInfomationOrderResponse) error
	GetInfomationOrder(context.Context, *GetInfomationOrderRequest, *GetInfomationOrderResponse) error
	CheckInfomationOrderBuy(context.Context, *CheckInfomationOrderBuyRequest, *CheckInfomationOrderBuyResponse) error
	ListUserInfomationOrders(context.Context, *ListUserInfomationOrdersRequest, *ListUserInfomationOrdersResponse) error
	ListFans(context.Context, *ListFansRequest, *ListFansResponse) error
	CreateArticle(context.Context, *CreateArticleRequest, *CreateArticleResponse) error
}

func RegisterMobileFishingServiceHandler(s server.Server, hdlr MobileFishingServiceHandler, opts ...server.HandlerOption) error {
	type mobileFishingService interface {
		RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *RefreshTokenResponse) error
		WechatLogin(ctx context.Context, in *WechatLoginRequest, out *WechatLoginResponse) error
		GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error
		GetUserExtend(ctx context.Context, in *GetUserExtendRequest, out *GetUserExtendResponse) error
		ListBanners(ctx context.Context, in *ListBannersRequest, out *ListBannersResponse) error
		GetInfomationConfig(ctx context.Context, in *GetInfomationConfigRequest, out *GetInfomationConfigResponse) error
		UserFollow(ctx context.Context, in *UserFollowRequest, out *UserFollowResponse) error
		CancelUserFollow(ctx context.Context, in *CancelUserFollowRequest, out *CancelUserFollowResponse) error
		ListUserFollows(ctx context.Context, in *ListUserFollowsRequest, out *ListUserFollowsResponse) error
		UserCollection(ctx context.Context, in *UserCollectionRequest, out *UserCollectionResponse) error
		ListInfomations(ctx context.Context, in *ListInfomationsRequest, out *ListInfomationsResponse) error
		DeleteInfomation(ctx context.Context, in *DeleteInfomationRequest, out *DeleteInfomationResponse) error
		GetInfomation(ctx context.Context, in *GetInfomationRequest, out *GetInfomationResponse) error
		UserInfomationLike(ctx context.Context, in *UserInfomationLikeRequest, out *UserInfomationLikeResponse) error
		UserInfomationCollection(ctx context.Context, in *UserInfomationCollectionRequest, out *UserInfomationCollectionResponse) error
		ListActicleCategorys(ctx context.Context, in *ListActicleCategorysRequest, out *ListActicleCategorysResponse) error
		GetActicleConfig(ctx context.Context, in *GetActicleConfigRequest, out *GetActicleConfigResponse) error
		DeleteActicle(ctx context.Context, in *DeleteArticleRequest, out *DeleteArticleResponse) error
		ListActiclesByCategory(ctx context.Context, in *ListActiclesByCategoryRequest, out *ListActiclesByCategoryResponse) error
		GetArticle(ctx context.Context, in *GetArticleRequest, out *GetArticleResponse) error
		UserArticleLike(ctx context.Context, in *UserArticleLikeRequest, out *UserArticleLikeResponse) error
		UserArticleCollection(ctx context.Context, in *UserArticleCollectionRequest, out *UserArticleCollectionResponse) error
		GetArticleTheme(ctx context.Context, in *GetArticleThemeRequest, out *GetArticleThemeResponse) error
		GetArticleTag(ctx context.Context, in *GetArticleTagRequest, out *GetArticleTagResponse) error
		ListActiclesByTag(ctx context.Context, in *ListActiclesByTagRequest, out *ListActiclesByTagResponse) error
		ListUserArticles(ctx context.Context, in *ListUserArticlesRequest, out *ListUserArticlesResponse) error
		ListUserInfomations(ctx context.Context, in *ListUserInfomationsRequest, out *ListUserInfomationsResponse) error
		SendComment(ctx context.Context, in *SendCommentRequest, out *SendCommentResponse) error
		UserCommentLike(ctx context.Context, in *UserCommentLikeRequest, out *UserCommentLikeResponse) error
		ListComments(ctx context.Context, in *ListCommentsRequest, out *ListCommentsResponse) error
		CheckUserFollw(ctx context.Context, in *CheckUserFollwRequest, out *CheckUserFollwResponse) error
		ListMessages(ctx context.Context, in *ListMessagesRequest, out *ListMessagesResponse) error
		UserMessageRead(ctx context.Context, in *UserMessageReadRequest, out *UserMessageReadResponse) error
		UserMessageReadAll(ctx context.Context, in *UserMessageReadAllRequest, out *UserMessageReadAllResponse) error
		GetUserMessageUnCount(ctx context.Context, in *GetUserMessageUnCountRequest, out *GetUserMessageUnCountResponse) error
		CreateInfomationOrder(ctx context.Context, in *CreateInfomationOrderRequest, out *CreateInfomationOrderResponse) error
		GetInfomationOrder(ctx context.Context, in *GetInfomationOrderRequest, out *GetInfomationOrderResponse) error
		CheckInfomationOrderBuy(ctx context.Context, in *CheckInfomationOrderBuyRequest, out *CheckInfomationOrderBuyResponse) error
		ListUserInfomationOrders(ctx context.Context, in *ListUserInfomationOrdersRequest, out *ListUserInfomationOrdersResponse) error
		ListFans(ctx context.Context, in *ListFansRequest, out *ListFansResponse) error
		CreateArticle(ctx context.Context, in *CreateArticleRequest, out *CreateArticleResponse) error
	}
	type MobileFishingService struct {
		mobileFishingService
	}
	h := &mobileFishingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MobileFishingService{h}, opts...))
}

type mobileFishingServiceHandler struct {
	MobileFishingServiceHandler
}

func (h *mobileFishingServiceHandler) RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *RefreshTokenResponse) error {
	return h.MobileFishingServiceHandler.RefreshToken(ctx, in, out)
}

func (h *mobileFishingServiceHandler) WechatLogin(ctx context.Context, in *WechatLoginRequest, out *WechatLoginResponse) error {
	return h.MobileFishingServiceHandler.WechatLogin(ctx, in, out)
}

func (h *mobileFishingServiceHandler) GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error {
	return h.MobileFishingServiceHandler.GetUser(ctx, in, out)
}

func (h *mobileFishingServiceHandler) GetUserExtend(ctx context.Context, in *GetUserExtendRequest, out *GetUserExtendResponse) error {
	return h.MobileFishingServiceHandler.GetUserExtend(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListBanners(ctx context.Context, in *ListBannersRequest, out *ListBannersResponse) error {
	return h.MobileFishingServiceHandler.ListBanners(ctx, in, out)
}

func (h *mobileFishingServiceHandler) GetInfomationConfig(ctx context.Context, in *GetInfomationConfigRequest, out *GetInfomationConfigResponse) error {
	return h.MobileFishingServiceHandler.GetInfomationConfig(ctx, in, out)
}

func (h *mobileFishingServiceHandler) UserFollow(ctx context.Context, in *UserFollowRequest, out *UserFollowResponse) error {
	return h.MobileFishingServiceHandler.UserFollow(ctx, in, out)
}

func (h *mobileFishingServiceHandler) CancelUserFollow(ctx context.Context, in *CancelUserFollowRequest, out *CancelUserFollowResponse) error {
	return h.MobileFishingServiceHandler.CancelUserFollow(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListUserFollows(ctx context.Context, in *ListUserFollowsRequest, out *ListUserFollowsResponse) error {
	return h.MobileFishingServiceHandler.ListUserFollows(ctx, in, out)
}

func (h *mobileFishingServiceHandler) UserCollection(ctx context.Context, in *UserCollectionRequest, out *UserCollectionResponse) error {
	return h.MobileFishingServiceHandler.UserCollection(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListInfomations(ctx context.Context, in *ListInfomationsRequest, out *ListInfomationsResponse) error {
	return h.MobileFishingServiceHandler.ListInfomations(ctx, in, out)
}

func (h *mobileFishingServiceHandler) DeleteInfomation(ctx context.Context, in *DeleteInfomationRequest, out *DeleteInfomationResponse) error {
	return h.MobileFishingServiceHandler.DeleteInfomation(ctx, in, out)
}

func (h *mobileFishingServiceHandler) GetInfomation(ctx context.Context, in *GetInfomationRequest, out *GetInfomationResponse) error {
	return h.MobileFishingServiceHandler.GetInfomation(ctx, in, out)
}

func (h *mobileFishingServiceHandler) UserInfomationLike(ctx context.Context, in *UserInfomationLikeRequest, out *UserInfomationLikeResponse) error {
	return h.MobileFishingServiceHandler.UserInfomationLike(ctx, in, out)
}

func (h *mobileFishingServiceHandler) UserInfomationCollection(ctx context.Context, in *UserInfomationCollectionRequest, out *UserInfomationCollectionResponse) error {
	return h.MobileFishingServiceHandler.UserInfomationCollection(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListActicleCategorys(ctx context.Context, in *ListActicleCategorysRequest, out *ListActicleCategorysResponse) error {
	return h.MobileFishingServiceHandler.ListActicleCategorys(ctx, in, out)
}

func (h *mobileFishingServiceHandler) GetActicleConfig(ctx context.Context, in *GetActicleConfigRequest, out *GetActicleConfigResponse) error {
	return h.MobileFishingServiceHandler.GetActicleConfig(ctx, in, out)
}

func (h *mobileFishingServiceHandler) DeleteActicle(ctx context.Context, in *DeleteArticleRequest, out *DeleteArticleResponse) error {
	return h.MobileFishingServiceHandler.DeleteActicle(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListActiclesByCategory(ctx context.Context, in *ListActiclesByCategoryRequest, out *ListActiclesByCategoryResponse) error {
	return h.MobileFishingServiceHandler.ListActiclesByCategory(ctx, in, out)
}

func (h *mobileFishingServiceHandler) GetArticle(ctx context.Context, in *GetArticleRequest, out *GetArticleResponse) error {
	return h.MobileFishingServiceHandler.GetArticle(ctx, in, out)
}

func (h *mobileFishingServiceHandler) UserArticleLike(ctx context.Context, in *UserArticleLikeRequest, out *UserArticleLikeResponse) error {
	return h.MobileFishingServiceHandler.UserArticleLike(ctx, in, out)
}

func (h *mobileFishingServiceHandler) UserArticleCollection(ctx context.Context, in *UserArticleCollectionRequest, out *UserArticleCollectionResponse) error {
	return h.MobileFishingServiceHandler.UserArticleCollection(ctx, in, out)
}

func (h *mobileFishingServiceHandler) GetArticleTheme(ctx context.Context, in *GetArticleThemeRequest, out *GetArticleThemeResponse) error {
	return h.MobileFishingServiceHandler.GetArticleTheme(ctx, in, out)
}

func (h *mobileFishingServiceHandler) GetArticleTag(ctx context.Context, in *GetArticleTagRequest, out *GetArticleTagResponse) error {
	return h.MobileFishingServiceHandler.GetArticleTag(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListActiclesByTag(ctx context.Context, in *ListActiclesByTagRequest, out *ListActiclesByTagResponse) error {
	return h.MobileFishingServiceHandler.ListActiclesByTag(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListUserArticles(ctx context.Context, in *ListUserArticlesRequest, out *ListUserArticlesResponse) error {
	return h.MobileFishingServiceHandler.ListUserArticles(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListUserInfomations(ctx context.Context, in *ListUserInfomationsRequest, out *ListUserInfomationsResponse) error {
	return h.MobileFishingServiceHandler.ListUserInfomations(ctx, in, out)
}

func (h *mobileFishingServiceHandler) SendComment(ctx context.Context, in *SendCommentRequest, out *SendCommentResponse) error {
	return h.MobileFishingServiceHandler.SendComment(ctx, in, out)
}

func (h *mobileFishingServiceHandler) UserCommentLike(ctx context.Context, in *UserCommentLikeRequest, out *UserCommentLikeResponse) error {
	return h.MobileFishingServiceHandler.UserCommentLike(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListComments(ctx context.Context, in *ListCommentsRequest, out *ListCommentsResponse) error {
	return h.MobileFishingServiceHandler.ListComments(ctx, in, out)
}

func (h *mobileFishingServiceHandler) CheckUserFollw(ctx context.Context, in *CheckUserFollwRequest, out *CheckUserFollwResponse) error {
	return h.MobileFishingServiceHandler.CheckUserFollw(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListMessages(ctx context.Context, in *ListMessagesRequest, out *ListMessagesResponse) error {
	return h.MobileFishingServiceHandler.ListMessages(ctx, in, out)
}

func (h *mobileFishingServiceHandler) UserMessageRead(ctx context.Context, in *UserMessageReadRequest, out *UserMessageReadResponse) error {
	return h.MobileFishingServiceHandler.UserMessageRead(ctx, in, out)
}

func (h *mobileFishingServiceHandler) UserMessageReadAll(ctx context.Context, in *UserMessageReadAllRequest, out *UserMessageReadAllResponse) error {
	return h.MobileFishingServiceHandler.UserMessageReadAll(ctx, in, out)
}

func (h *mobileFishingServiceHandler) GetUserMessageUnCount(ctx context.Context, in *GetUserMessageUnCountRequest, out *GetUserMessageUnCountResponse) error {
	return h.MobileFishingServiceHandler.GetUserMessageUnCount(ctx, in, out)
}

func (h *mobileFishingServiceHandler) CreateInfomationOrder(ctx context.Context, in *CreateInfomationOrderRequest, out *CreateInfomationOrderResponse) error {
	return h.MobileFishingServiceHandler.CreateInfomationOrder(ctx, in, out)
}

func (h *mobileFishingServiceHandler) GetInfomationOrder(ctx context.Context, in *GetInfomationOrderRequest, out *GetInfomationOrderResponse) error {
	return h.MobileFishingServiceHandler.GetInfomationOrder(ctx, in, out)
}

func (h *mobileFishingServiceHandler) CheckInfomationOrderBuy(ctx context.Context, in *CheckInfomationOrderBuyRequest, out *CheckInfomationOrderBuyResponse) error {
	return h.MobileFishingServiceHandler.CheckInfomationOrderBuy(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListUserInfomationOrders(ctx context.Context, in *ListUserInfomationOrdersRequest, out *ListUserInfomationOrdersResponse) error {
	return h.MobileFishingServiceHandler.ListUserInfomationOrders(ctx, in, out)
}

func (h *mobileFishingServiceHandler) ListFans(ctx context.Context, in *ListFansRequest, out *ListFansResponse) error {
	return h.MobileFishingServiceHandler.ListFans(ctx, in, out)
}

func (h *mobileFishingServiceHandler) CreateArticle(ctx context.Context, in *CreateArticleRequest, out *CreateArticleResponse) error {
	return h.MobileFishingServiceHandler.CreateArticle(ctx, in, out)
}
