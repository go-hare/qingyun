// Code generated by protoc-gen-realmicro. DO NOT EDIT.
// source: proto/mobile/mobile-fishing-user.proto

package mobile_fishing_user

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/realmicro/realmicro/client"
	server "github.com/realmicro/realmicro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MobileFishingUserService service

// Client API for MobileFishingUserService service

type MobileFishingUserService interface {
	// Sends a greeting
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*RefreshTokenResponse, error)
	WechatLogin(ctx context.Context, in *WechatLoginRequest, opts ...client.CallOption) (*WechatLoginResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error)
}

type mobileFishingUserService struct {
	c    client.Client
	name string
}

func NewMobileFishingUserService(name string, c client.Client) MobileFishingUserService {
	return &mobileFishingUserService{
		c:    c,
		name: name,
	}
}

func (c *mobileFishingUserService) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*RefreshTokenResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingUserService.RefreshToken", in)
	out := new(RefreshTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingUserService) WechatLogin(ctx context.Context, in *WechatLoginRequest, opts ...client.CallOption) (*WechatLoginResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingUserService.WechatLogin", in)
	out := new(WechatLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileFishingUserService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "MobileFishingUserService.GetUser", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MobileFishingUserService service

type MobileFishingUserServiceHandler interface {
	// Sends a greeting
	RefreshToken(context.Context, *RefreshTokenRequest, *RefreshTokenResponse) error
	WechatLogin(context.Context, *WechatLoginRequest, *WechatLoginResponse) error
	GetUser(context.Context, *GetUserRequest, *GetUserResponse) error
}

func RegisterMobileFishingUserServiceHandler(s server.Server, hdlr MobileFishingUserServiceHandler, opts ...server.HandlerOption) error {
	type mobileFishingUserService interface {
		RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *RefreshTokenResponse) error
		WechatLogin(ctx context.Context, in *WechatLoginRequest, out *WechatLoginResponse) error
		GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error
	}
	type MobileFishingUserService struct {
		mobileFishingUserService
	}
	h := &mobileFishingUserServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MobileFishingUserService{h}, opts...))
}

type mobileFishingUserServiceHandler struct {
	MobileFishingUserServiceHandler
}

func (h *mobileFishingUserServiceHandler) RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *RefreshTokenResponse) error {
	return h.MobileFishingUserServiceHandler.RefreshToken(ctx, in, out)
}

func (h *mobileFishingUserServiceHandler) WechatLogin(ctx context.Context, in *WechatLoginRequest, out *WechatLoginResponse) error {
	return h.MobileFishingUserServiceHandler.WechatLogin(ctx, in, out)
}

func (h *mobileFishingUserServiceHandler) GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error {
	return h.MobileFishingUserServiceHandler.GetUser(ctx, in, out)
}
