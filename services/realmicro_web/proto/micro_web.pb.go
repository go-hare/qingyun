// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/micro_web.proto

package micro_web

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_status_success        StatusCode = 0
	StatusCode_status_internal_error StatusCode = 1
	StatusCode_status_param_error    StatusCode = 2
)

var StatusCode_name = map[int32]string{
	0: "status_success",
	1: "status_internal_error",
	2: "status_param_error",
}

var StatusCode_value = map[string]int32{
	"status_success":        0,
	"status_internal_error": 1,
	"status_param_error":    2,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_46b46c50b104d816, []int{0}
}

type Status struct {
	Code                 StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=micro_web.StatusCode" json:"code"`
	Msg                  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_46b46c50b104d816, []int{0}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

type ProjectAliasRequest struct {
	OprUser              int64    `protobuf:"varint,1,opt,name=opr_user,json=oprUser,proto3" json:"opr_user,omitempty"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	GatewayAlias         string   `protobuf:"bytes,3,opt,name=gateway_alias,json=gatewayAlias,proto3" json:"gateway_alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectAliasRequest) Reset()         { *m = ProjectAliasRequest{} }
func (m *ProjectAliasRequest) String() string { return proto.CompactTextString(m) }
func (*ProjectAliasRequest) ProtoMessage()    {}
func (*ProjectAliasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46b46c50b104d816, []int{1}
}
func (m *ProjectAliasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectAliasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectAliasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectAliasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectAliasRequest.Merge(m, src)
}
func (m *ProjectAliasRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProjectAliasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectAliasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectAliasRequest proto.InternalMessageInfo

type ProjectAliasResponse struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectAliasResponse) Reset()         { *m = ProjectAliasResponse{} }
func (m *ProjectAliasResponse) String() string { return proto.CompactTextString(m) }
func (*ProjectAliasResponse) ProtoMessage()    {}
func (*ProjectAliasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46b46c50b104d816, []int{2}
}
func (m *ProjectAliasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectAliasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectAliasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectAliasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectAliasResponse.Merge(m, src)
}
func (m *ProjectAliasResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProjectAliasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectAliasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectAliasResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("micro_web.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*Status)(nil), "micro_web.Status")
	proto.RegisterType((*ProjectAliasRequest)(nil), "micro_web.ProjectAliasRequest")
	proto.RegisterType((*ProjectAliasResponse)(nil), "micro_web.ProjectAliasResponse")
}

func init() { proto.RegisterFile("proto/micro_web.proto", fileDescriptor_46b46c50b104d816) }

var fileDescriptor_46b46c50b104d816 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0x59, 0x78, 0xc3, 0x9f, 0x79, 0x11, 0x71, 0x15, 0x53, 0x38, 0x14, 0x52, 0x63, 0x82,
	0x26, 0x42, 0x02, 0x47, 0x4f, 0xe0, 0xd9, 0xa8, 0x25, 0xc6, 0xc4, 0xc4, 0x34, 0xdb, 0xb2, 0xd6,
	0x1a, 0xca, 0xd6, 0xdd, 0x6d, 0x88, 0xdf, 0x90, 0xa3, 0x9f, 0xc0, 0x08, 0x47, 0x3f, 0x81, 0x47,
	0xd3, 0xed, 0x0a, 0x18, 0xf5, 0xd2, 0xcc, 0x3c, 0xf3, 0xcc, 0xfc, 0x66, 0xba, 0x50, 0x8b, 0x38,
	0x93, 0xac, 0x1b, 0x06, 0x1e, 0x67, 0xce, 0x8c, 0xba, 0x1d, 0x95, 0xe3, 0xd2, 0x4a, 0x68, 0x9c,
	0xf8, 0x81, 0x7c, 0x88, 0xdd, 0x8e, 0xc7, 0xc2, 0xae, 0xcf, 0x7c, 0xd6, 0x55, 0x0e, 0x37, 0xbe,
	0x57, 0x59, 0xda, 0x9e, 0x44, 0x69, 0xa7, 0x75, 0x01, 0xf9, 0x91, 0x24, 0x32, 0x16, 0xb8, 0x0f,
	0xff, 0x3c, 0x36, 0xa6, 0x06, 0x6a, 0xa1, 0x76, 0xa5, 0x57, 0xeb, 0xac, 0x19, 0xa9, 0xe1, 0x8c,
	0x8d, 0xe9, 0xb0, 0xf8, 0xfe, 0xda, 0x54, 0x36, 0x5b, 0x7d, 0x71, 0x15, 0x72, 0xa1, 0xf0, 0x8d,
	0x6c, 0x0b, 0xb5, 0x4b, 0x76, 0x12, 0x5a, 0x0c, 0x76, 0x2f, 0x39, 0x7b, 0xa4, 0x9e, 0x1c, 0x4c,
	0x02, 0x22, 0x6c, 0xfa, 0x14, 0x53, 0x21, 0x71, 0x1d, 0x8a, 0x2c, 0xe2, 0x4e, 0x2c, 0x28, 0x57,
	0x84, 0x9c, 0x5d, 0x60, 0x11, 0xbf, 0x16, 0x94, 0x63, 0x03, 0x0a, 0x3e, 0x91, 0x74, 0x46, 0x9e,
	0xf5, 0x9c, 0xaf, 0x14, 0x1f, 0xc0, 0x96, 0x0e, 0x1d, 0x92, 0x0c, 0x33, 0x72, 0xaa, 0x5e, 0xd6,
	0xa2, 0x02, 0x58, 0x03, 0xd8, 0xfb, 0x0e, 0x14, 0x11, 0x9b, 0x0a, 0x8a, 0x8f, 0x20, 0x2f, 0xd4,
	0xe2, 0x8a, 0xf7, 0xbf, 0xb7, 0xf3, 0xe3, 0x22, 0x5b, 0x1b, 0x8e, 0x47, 0x00, 0xeb, 0x1b, 0x31,
	0x86, 0x4a, 0xaa, 0x3b, 0x22, 0xf6, 0x3c, 0x2a, 0x44, 0x35, 0x83, 0xeb, 0x50, 0xd3, 0x5a, 0x30,
	0x95, 0x94, 0x4f, 0xc9, 0xc4, 0xa1, 0x9c, 0x33, 0x5e, 0x45, 0x78, 0x1f, 0xb0, 0x2e, 0x45, 0x84,
	0x93, 0x50, 0xeb, 0xd9, 0xde, 0x1d, 0x14, 0xcf, 0x13, 0xe0, 0x0d, 0x75, 0xf1, 0x15, 0x94, 0x37,
	0x77, 0xc4, 0xe6, 0xc6, 0x2e, 0xbf, 0xfc, 0xad, 0x46, 0xf3, 0xcf, 0x7a, 0x7a, 0x9c, 0x95, 0x19,
	0x1e, 0xce, 0x17, 0x66, 0xe6, 0x63, 0x61, 0xa2, 0xf9, 0xd2, 0x44, 0x2f, 0x4b, 0x13, 0xbd, 0x2d,
	0x4d, 0x74, 0xbb, 0xad, 0x5e, 0xf5, 0x74, 0xd5, 0xed, 0xe6, 0x95, 0xd0, 0xff, 0x0c, 0x00, 0x00,
	0xff, 0xff, 0x94, 0x0c, 0x8d, 0x87, 0x39, 0x02, 0x00, 0x00,
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMicroWeb(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintMicroWeb(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProjectAliasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectAliasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectAliasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GatewayAlias) > 0 {
		i -= len(m.GatewayAlias)
		copy(dAtA[i:], m.GatewayAlias)
		i = encodeVarintMicroWeb(dAtA, i, uint64(len(m.GatewayAlias)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintMicroWeb(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x12
	}
	if m.OprUser != 0 {
		i = encodeVarintMicroWeb(dAtA, i, uint64(m.OprUser))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProjectAliasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectAliasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectAliasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMicroWeb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMicroWeb(dAtA []byte, offset int, v uint64) int {
	offset -= sovMicroWeb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedStatus(r randyMicroWeb, easy bool) *Status {
	this := &Status{}
	this.Code = StatusCode([]int32{0, 1, 2}[r.Intn(3)])
	this.Msg = string(randStringMicroWeb(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMicroWeb(r, 3)
	}
	return this
}

func NewPopulatedProjectAliasRequest(r randyMicroWeb, easy bool) *ProjectAliasRequest {
	this := &ProjectAliasRequest{}
	this.OprUser = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.OprUser *= -1
	}
	this.Gateway = string(randStringMicroWeb(r))
	this.GatewayAlias = string(randStringMicroWeb(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMicroWeb(r, 4)
	}
	return this
}

func NewPopulatedProjectAliasResponse(r randyMicroWeb, easy bool) *ProjectAliasResponse {
	this := &ProjectAliasResponse{}
	if r.Intn(5) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMicroWeb(r, 2)
	}
	return this
}

type randyMicroWeb interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMicroWeb(r randyMicroWeb) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMicroWeb(r randyMicroWeb) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneMicroWeb(r)
	}
	return string(tmps)
}
func randUnrecognizedMicroWeb(r randyMicroWeb, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMicroWeb(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMicroWeb(dAtA []byte, r randyMicroWeb, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMicroWeb(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateMicroWeb(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateMicroWeb(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMicroWeb(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMicroWeb(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMicroWeb(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMicroWeb(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMicroWeb(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMicroWeb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProjectAliasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OprUser != 0 {
		n += 1 + sovMicroWeb(uint64(m.OprUser))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovMicroWeb(uint64(l))
	}
	l = len(m.GatewayAlias)
	if l > 0 {
		n += 1 + l + sovMicroWeb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProjectAliasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovMicroWeb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMicroWeb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMicroWeb(x uint64) (n int) {
	return sovMicroWeb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMicroWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMicroWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMicroWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMicroWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMicroWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMicroWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMicroWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectAliasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMicroWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectAliasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectAliasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OprUser", wireType)
			}
			m.OprUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMicroWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OprUser |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMicroWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMicroWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMicroWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMicroWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMicroWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMicroWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMicroWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMicroWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectAliasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMicroWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectAliasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectAliasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMicroWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMicroWeb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMicroWeb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMicroWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMicroWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMicroWeb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMicroWeb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMicroWeb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMicroWeb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMicroWeb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMicroWeb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMicroWeb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMicroWeb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMicroWeb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMicroWeb = fmt.Errorf("proto: unexpected end of group")
)
