// Code generated by protoc-gen-realmicro. DO NOT EDIT.
// source: proto/micro_web.proto

package micro_web

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/realmicro/realmicro/client"
	server "github.com/realmicro/realmicro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MicroWeb service

// Client API for MicroWeb service

type MicroWebService interface {
	ProjectAlias(ctx context.Context, in *ProjectAliasRequest, opts ...client.CallOption) (*ProjectAliasResponse, error)
}

type microWebService struct {
	c    client.Client
	name string
}

func NewMicroWebService(name string, c client.Client) MicroWebService {
	return &microWebService{
		c:    c,
		name: name,
	}
}

func (c *microWebService) ProjectAlias(ctx context.Context, in *ProjectAliasRequest, opts ...client.CallOption) (*ProjectAliasResponse, error) {
	req := c.c.NewRequest(c.name, "MicroWeb.ProjectAlias", in)
	out := new(ProjectAliasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MicroWeb service

type MicroWebHandler interface {
	ProjectAlias(context.Context, *ProjectAliasRequest, *ProjectAliasResponse) error
}

func RegisterMicroWebHandler(s server.Server, hdlr MicroWebHandler, opts ...server.HandlerOption) error {
	type microWeb interface {
		ProjectAlias(ctx context.Context, in *ProjectAliasRequest, out *ProjectAliasResponse) error
	}
	type MicroWeb struct {
		microWeb
	}
	h := &microWebHandler{hdlr}
	return s.Handle(s.NewHandler(&MicroWeb{h}, opts...))
}

type microWebHandler struct {
	MicroWebHandler
}

func (h *microWebHandler) ProjectAlias(ctx context.Context, in *ProjectAliasRequest, out *ProjectAliasResponse) error {
	return h.MicroWebHandler.ProjectAlias(ctx, in, out)
}
