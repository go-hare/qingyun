// Code generated by protoc-gen-realmicro. DO NOT EDIT.
// source: proto/mobile/mobile-chat-gpt.proto

package mobile_chat_gpt

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/realmicro/realmicro/client"
	server "github.com/realmicro/realmicro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MobileChatGptService service

// Client API for MobileChatGptService service

type MobileChatGptService interface {
	ListCategoryAndModels(ctx context.Context, in *ListCategoryAndModelsRequest, opts ...client.CallOption) (*ListCategoryAndModelsResponse, error)
	QuestionGptStream(ctx context.Context, in *QuestionGptStreamRequest, opts ...client.CallOption) (MobileChatGptService_QuestionGptStreamService, error)
}

type mobileChatGptService struct {
	c    client.Client
	name string
}

func NewMobileChatGptService(name string, c client.Client) MobileChatGptService {
	return &mobileChatGptService{
		c:    c,
		name: name,
	}
}

func (c *mobileChatGptService) ListCategoryAndModels(ctx context.Context, in *ListCategoryAndModelsRequest, opts ...client.CallOption) (*ListCategoryAndModelsResponse, error) {
	req := c.c.NewRequest(c.name, "MobileChatGptService.ListCategoryAndModels", in)
	out := new(ListCategoryAndModelsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mobileChatGptService) QuestionGptStream(ctx context.Context, in *QuestionGptStreamRequest, opts ...client.CallOption) (MobileChatGptService_QuestionGptStreamService, error) {
	req := c.c.NewRequest(c.name, "MobileChatGptService.QuestionGptStream", &QuestionGptStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &mobileChatGptServiceQuestionGptStream{stream}, nil
}

type MobileChatGptService_QuestionGptStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*QuestionGptStreamResponse, error)
}

type mobileChatGptServiceQuestionGptStream struct {
	stream client.Stream
}

func (x *mobileChatGptServiceQuestionGptStream) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *mobileChatGptServiceQuestionGptStream) Close() error {
	return x.stream.Close()
}

func (x *mobileChatGptServiceQuestionGptStream) Context() context.Context {
	return x.stream.Context()
}

func (x *mobileChatGptServiceQuestionGptStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *mobileChatGptServiceQuestionGptStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *mobileChatGptServiceQuestionGptStream) Recv() (*QuestionGptStreamResponse, error) {
	m := new(QuestionGptStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MobileChatGptService service

type MobileChatGptServiceHandler interface {
	ListCategoryAndModels(context.Context, *ListCategoryAndModelsRequest, *ListCategoryAndModelsResponse) error
	QuestionGptStream(context.Context, *QuestionGptStreamRequest, MobileChatGptService_QuestionGptStreamStream) error
}

func RegisterMobileChatGptServiceHandler(s server.Server, hdlr MobileChatGptServiceHandler, opts ...server.HandlerOption) error {
	type mobileChatGptService interface {
		ListCategoryAndModels(ctx context.Context, in *ListCategoryAndModelsRequest, out *ListCategoryAndModelsResponse) error
		QuestionGptStream(ctx context.Context, stream server.Stream) error
	}
	type MobileChatGptService struct {
		mobileChatGptService
	}
	h := &mobileChatGptServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MobileChatGptService{h}, opts...))
}

type mobileChatGptServiceHandler struct {
	MobileChatGptServiceHandler
}

func (h *mobileChatGptServiceHandler) ListCategoryAndModels(ctx context.Context, in *ListCategoryAndModelsRequest, out *ListCategoryAndModelsResponse) error {
	return h.MobileChatGptServiceHandler.ListCategoryAndModels(ctx, in, out)
}

func (h *mobileChatGptServiceHandler) QuestionGptStream(ctx context.Context, stream server.Stream) error {
	m := new(QuestionGptStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MobileChatGptServiceHandler.QuestionGptStream(ctx, m, &mobileChatGptServiceQuestionGptStreamStream{stream})
}

type MobileChatGptService_QuestionGptStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*QuestionGptStreamResponse) error
}

type mobileChatGptServiceQuestionGptStreamStream struct {
	stream server.Stream
}

func (x *mobileChatGptServiceQuestionGptStreamStream) Close() error {
	return x.stream.Close()
}

func (x *mobileChatGptServiceQuestionGptStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *mobileChatGptServiceQuestionGptStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *mobileChatGptServiceQuestionGptStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *mobileChatGptServiceQuestionGptStreamStream) Send(m *QuestionGptStreamResponse) error {
	return x.stream.Send(m)
}
