// Code generated by protoc-gen-realmicro. DO NOT EDIT.
// source: proto/mobile/mobile-book-keeping.proto

package mobile_book_keeping

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/realmicro/realmicro/client"
	server "github.com/realmicro/realmicro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BookKeepingService service

// Client API for BookKeepingService service

type BookKeepingService interface {
	// Sends a greeting
	ListCategorys(ctx context.Context, in *ListCategorysRequest, opts ...client.CallOption) (*ListCategorysResponse, error)
	//获取账户信息
	ListAccountFunds(ctx context.Context, in *ListAccountFundsRequest, opts ...client.CallOption) (*ListAccountFundsResponse, error)
	//创建账户
	CreatetAccountFunds(ctx context.Context, in *CreatetAccountFundsRequest, opts ...client.CallOption) (*CreatetAccountFundsResponse, error)
	//删除账单
	DeletetAccountFunds(ctx context.Context, in *DeletetAccountFundsRequest, opts ...client.CallOption) (*DeletetAccountFundsResponse, error)
	//创建账单
	CreateBill(ctx context.Context, in *CreateBillRequest, opts ...client.CallOption) (*CreateBillResponse, error)
	//转移账单
	TransferBillToAccountFunds(ctx context.Context, in *TransferBillToAccountFundsRequest, opts ...client.CallOption) (*TransferBillToAccountFundsResponse, error)
}

type bookKeepingService struct {
	c    client.Client
	name string
}

func NewBookKeepingService(name string, c client.Client) BookKeepingService {
	return &bookKeepingService{
		c:    c,
		name: name,
	}
}

func (c *bookKeepingService) ListCategorys(ctx context.Context, in *ListCategorysRequest, opts ...client.CallOption) (*ListCategorysResponse, error) {
	req := c.c.NewRequest(c.name, "BookKeepingService.ListCategorys", in)
	out := new(ListCategorysResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookKeepingService) ListAccountFunds(ctx context.Context, in *ListAccountFundsRequest, opts ...client.CallOption) (*ListAccountFundsResponse, error) {
	req := c.c.NewRequest(c.name, "BookKeepingService.ListAccountFunds", in)
	out := new(ListAccountFundsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookKeepingService) CreatetAccountFunds(ctx context.Context, in *CreatetAccountFundsRequest, opts ...client.CallOption) (*CreatetAccountFundsResponse, error) {
	req := c.c.NewRequest(c.name, "BookKeepingService.CreatetAccountFunds", in)
	out := new(CreatetAccountFundsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookKeepingService) DeletetAccountFunds(ctx context.Context, in *DeletetAccountFundsRequest, opts ...client.CallOption) (*DeletetAccountFundsResponse, error) {
	req := c.c.NewRequest(c.name, "BookKeepingService.DeletetAccountFunds", in)
	out := new(DeletetAccountFundsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookKeepingService) CreateBill(ctx context.Context, in *CreateBillRequest, opts ...client.CallOption) (*CreateBillResponse, error) {
	req := c.c.NewRequest(c.name, "BookKeepingService.CreateBill", in)
	out := new(CreateBillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookKeepingService) TransferBillToAccountFunds(ctx context.Context, in *TransferBillToAccountFundsRequest, opts ...client.CallOption) (*TransferBillToAccountFundsResponse, error) {
	req := c.c.NewRequest(c.name, "BookKeepingService.TransferBillToAccountFunds", in)
	out := new(TransferBillToAccountFundsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BookKeepingService service

type BookKeepingServiceHandler interface {
	// Sends a greeting
	ListCategorys(context.Context, *ListCategorysRequest, *ListCategorysResponse) error
	//获取账户信息
	ListAccountFunds(context.Context, *ListAccountFundsRequest, *ListAccountFundsResponse) error
	//创建账户
	CreatetAccountFunds(context.Context, *CreatetAccountFundsRequest, *CreatetAccountFundsResponse) error
	//删除账单
	DeletetAccountFunds(context.Context, *DeletetAccountFundsRequest, *DeletetAccountFundsResponse) error
	//创建账单
	CreateBill(context.Context, *CreateBillRequest, *CreateBillResponse) error
	//转移账单
	TransferBillToAccountFunds(context.Context, *TransferBillToAccountFundsRequest, *TransferBillToAccountFundsResponse) error
}

func RegisterBookKeepingServiceHandler(s server.Server, hdlr BookKeepingServiceHandler, opts ...server.HandlerOption) error {
	type bookKeepingService interface {
		ListCategorys(ctx context.Context, in *ListCategorysRequest, out *ListCategorysResponse) error
		ListAccountFunds(ctx context.Context, in *ListAccountFundsRequest, out *ListAccountFundsResponse) error
		CreatetAccountFunds(ctx context.Context, in *CreatetAccountFundsRequest, out *CreatetAccountFundsResponse) error
		DeletetAccountFunds(ctx context.Context, in *DeletetAccountFundsRequest, out *DeletetAccountFundsResponse) error
		CreateBill(ctx context.Context, in *CreateBillRequest, out *CreateBillResponse) error
		TransferBillToAccountFunds(ctx context.Context, in *TransferBillToAccountFundsRequest, out *TransferBillToAccountFundsResponse) error
	}
	type BookKeepingService struct {
		bookKeepingService
	}
	h := &bookKeepingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BookKeepingService{h}, opts...))
}

type bookKeepingServiceHandler struct {
	BookKeepingServiceHandler
}

func (h *bookKeepingServiceHandler) ListCategorys(ctx context.Context, in *ListCategorysRequest, out *ListCategorysResponse) error {
	return h.BookKeepingServiceHandler.ListCategorys(ctx, in, out)
}

func (h *bookKeepingServiceHandler) ListAccountFunds(ctx context.Context, in *ListAccountFundsRequest, out *ListAccountFundsResponse) error {
	return h.BookKeepingServiceHandler.ListAccountFunds(ctx, in, out)
}

func (h *bookKeepingServiceHandler) CreatetAccountFunds(ctx context.Context, in *CreatetAccountFundsRequest, out *CreatetAccountFundsResponse) error {
	return h.BookKeepingServiceHandler.CreatetAccountFunds(ctx, in, out)
}

func (h *bookKeepingServiceHandler) DeletetAccountFunds(ctx context.Context, in *DeletetAccountFundsRequest, out *DeletetAccountFundsResponse) error {
	return h.BookKeepingServiceHandler.DeletetAccountFunds(ctx, in, out)
}

func (h *bookKeepingServiceHandler) CreateBill(ctx context.Context, in *CreateBillRequest, out *CreateBillResponse) error {
	return h.BookKeepingServiceHandler.CreateBill(ctx, in, out)
}

func (h *bookKeepingServiceHandler) TransferBillToAccountFunds(ctx context.Context, in *TransferBillToAccountFundsRequest, out *TransferBillToAccountFundsResponse) error {
	return h.BookKeepingServiceHandler.TransferBillToAccountFunds(ctx, in, out)
}
